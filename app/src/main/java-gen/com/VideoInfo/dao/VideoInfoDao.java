package com.VideoInfo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.VideoInfo.entity.VideoInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO_INFO".
*/
public class VideoInfoDao extends AbstractDao<VideoInfo, Long> {

    public static final String TABLENAME = "VIDEO_INFO";

    /**
     * Properties of entity VideoInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property File_Name = new Property(1, String.class, "file_Name", false, "FILE__NAME");
        public final static Property File_Size = new Property(2, String.class, "file_Size", false, "FILE__SIZE");
        public final static Property File_Path = new Property(3, String.class, "file_Path", false, "FILE__PATH");
        public final static Property File_Duration = new Property(4, String.class, "file_Duration", false, "FILE__DURATION");
        public final static Property File_Extention = new Property(5, String.class, "file_Extention", false, "FILE__EXTENTION");
    };


    public VideoInfoDao(DaoConfig config) {
        super(config);
    }
    
    public VideoInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"FILE__NAME\" TEXT," + // 1: file_Name
                "\"FILE__SIZE\" TEXT," + // 2: file_Size
                "\"FILE__PATH\" TEXT," + // 3: file_Path
                "\"FILE__DURATION\" TEXT," + // 4: file_Duration
                "\"FILE__EXTENTION\" TEXT);"); // 5: file_Extention
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, VideoInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String file_Name = entity.getFile_Name();
        if (file_Name != null) {
            stmt.bindString(2, file_Name);
        }
 
        String file_Size = entity.getFile_Size();
        if (file_Size != null) {
            stmt.bindString(3, file_Size);
        }
 
        String file_Path = entity.getFile_Path();
        if (file_Path != null) {
            stmt.bindString(4, file_Path);
        }
 
        String file_Duration = entity.getFile_Duration();
        if (file_Duration != null) {
            stmt.bindString(5, file_Duration);
        }
 
        String file_Extention = entity.getFile_Extention();
        if (file_Extention != null) {
            stmt.bindString(6, file_Extention);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public VideoInfo readEntity(Cursor cursor, int offset) {
        VideoInfo entity = new VideoInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // file_Name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // file_Size
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // file_Path
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // file_Duration
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // file_Extention
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, VideoInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFile_Name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFile_Size(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFile_Path(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFile_Duration(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFile_Extention(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(VideoInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(VideoInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
